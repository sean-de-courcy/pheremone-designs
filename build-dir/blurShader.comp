#version 430

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_input;
layout(rgba32f, binding = 1) uniform image2D img_output;

int blurWorkGroupSize = 2;
int HEIGHT = 720;
int WIDTH = 1280;
bool BOUNCE = false;

vec3 blur(ivec2 coords, float pixels[4*4*3]) {
    vec3 total = vec3(0.0, 0.0, 0.0);
    int numPixels = 0;
    bool notRan = false;
    for (int i = 0; i <= 2; i += 1) {
        for (int j = 0; j <= 2; j += 1) {
            int globalx = int(gl_GlobalInvocationID.x*blurWorkGroupSize + coords.x) + (i-1);
            int globaly = int(gl_GlobalInvocationID.y*blurWorkGroupSize + coords.y) + (j-1);
            if (!(BOUNCE && (globalx < 0 || globaly < 0 || globalx > WIDTH || globaly > HEIGHT))) {
                int index = (coords.y+j)*4 + coords.x+i;
                total.r += pixels[index*3    ];
                total.g += pixels[index*3 + 1];
                total.b += pixels[index*3 + 2];
                numPixels += 1;
            } else {
                notRan = true;
            }
        }
    }
    float avgr = total.r / numPixels; 
    //avgr -= avgr*0.1;
    avgr = (avgr > 0.75 ? avgr - 0.6*(1 - avgr) - 0.00005 : avgr - 0.1*avgr);
    if (avgr < 0.0001) {
        avgr = 0;
    }
    float avgg = total.g / numPixels; 
    //avgg -= avgg*0.1;
    avgg = (avgg > 0.75 ? avgg - 0.6*(1 - avgg) - 0.00005 : avgg - 0.1*avgg);
    if (avgg < 0.0001) {
        avgg = 0;
    }
    float avgb = total.b / numPixels; 
    //avgb -= avgb*0.1;
    avgb = (avgb > 0.75 ? avgb - 0.6*(1 - avgb) - 0.00005 : avgb - 0.1*avgb);
    if (avgb < 0.0001) {
        avgb = 0;
    }
    return(vec3(avgr,avgg,avgb));
}

void main () {
    float pixelData[4*4*3];
    for (int i = -1; i < blurWorkGroupSize + 1; i += 1) {
        for (int j = -1; j < blurWorkGroupSize + 1; j += 1) {
            vec4 pixelToAdd = imageLoad(img_input, ivec2(gl_GlobalInvocationID.x*blurWorkGroupSize + i + int(!BOUNCE)*(WIDTH*int(gl_GlobalInvocationID.x*blurWorkGroupSize + i < 0) - WIDTH*int(gl_GlobalInvocationID.x*blurWorkGroupSize + i > WIDTH)), gl_GlobalInvocationID.y*blurWorkGroupSize + j + int(!BOUNCE)*(HEIGHT*int(gl_GlobalInvocationID.y + j < 0) - HEIGHT*int(gl_GlobalInvocationID.y + j > HEIGHT))));
            pixelData[((j+1)*4 + i+1)*3    ] = pixelToAdd.r;
            pixelData[((j+1)*4 + i+1)*3 + 1] = pixelToAdd.g;
            pixelData[((j+1)*4 + i+1)*3 + 2] = pixelToAdd.b;
        }
    }
    for (int i = 0; i < blurWorkGroupSize; i += 1) {
        for (int j = 0; j < blurWorkGroupSize; j += 1) {
            ivec2 coords = ivec2(i,j);
            vec4 outputPixel = vec4(vec3(blur(coords, pixelData)), 1);
            imageStore(img_output, ivec2(gl_GlobalInvocationID.x*blurWorkGroupSize + coords.x, gl_GlobalInvocationID.y*blurWorkGroupSize + coords.y), outputPixel);
        }
    }
}